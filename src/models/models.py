from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash

db = SQLAlchemy()

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(256), nullable=False)  # Increased length for hash
    profile_image_url = db.Column(db.String(2048), nullable=True)
    phone_number = db.Column(db.String(20), nullable=True)
    goals = db.relationship("Goal", backref="user", lazy=True)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    def __repr__(self):
        return f'<User {self.username}>'

class Link(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    url = db.Column(db.String(2048), nullable=False)
    title = db.Column(db.String(200))
    description = db.Column(db.Text)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    goal_id = db.Column(db.Integer, db.ForeignKey('goal.id'), nullable=True) # Link can be associated with a goal
    # Add AI generated summary and tags later
    summary_ai = db.Column(db.Text, nullable=True)
    tags_ai = db.Column(db.JSON, nullable=True)

    def __repr__(self):
        return f'<Link {self.url}>'

class Goal(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    status = db.Column(db.String(50), default='pending') # e.g., pending, active, completed, error
    progress = db.Column(db.Integer, default=0) # Percentage
    questions = db.Column(db.JSON, nullable=True) # Stores questions generated by AI
    todos = db.Column(db.JSON, nullable=True) # Stores todos generated by AI
    error_message = db.Column(db.Text, nullable=True) # To store any error messages from AI generation
    links = db.relationship("Link", backref="goal", lazy=True)

    def __repr__(self):
        return f'<Goal {self.title}>'

